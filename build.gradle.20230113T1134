buildscript {
    repositories {
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath "com.gradle.publish:plugin-publish-plugin:0.20.0"
    }
}

plugins {
//    id "com.gradle.plugin-publish" version "0.20.0"
    id 'java'
    id 'maven-publish'
    id 'java-library'
}

apply plugin: "com.gradle.plugin-publish"

repositories {
    mavenCentral()
    mavenLocal()
}

group 'de.inetsoftware'
archivesBaseName = 'jwebassembly-gradle'
version = '0.4'
sourceCompatibility = "1.8"
targetCompatibility = "1.8"

dependencies {
    // https://mvnrepository.com/artifact/com.gradle.publish/plugin-publish-plugin
    implementation 'com.gradle.publish:plugin-publish-plugin:0.20.0'
    compile gradleApi()
}

sourceSets {
    main {
        java {
            srcDirs = ["src"]
        }
        resources {
            srcDir 'src'
        }
    }
}

configurations {
  //declaring new configuration that will be used to associate with artifacts
  schema
}

task sourcesJar(type: Jar) {
   archiveBaseName=archivesBaseName
   classifier 'sources'
   from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
   archiveBaseName=archivesBaseName
   classifier 'javadoc'
   from javadoc.destinationDir
}

artifacts {
    schema sourcesJar
    schema javadocJar
}

publishing {
    repositories {
        maven {
            name = "repo"
            url = uri('../repo')
            def releasesRepoUrl = uri('../repo')
            def snapshotsRepoUrl = uri('../repo')
            url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
        }
		maven {
			name = "qedCloudsmith"
			url = "https://maven.cloudsmith.io/queues-enforth-development-inc/aes-internal/"
			def releasesRepoUrl = "https://maven.cloudsmith.io/queues-enforth-development-inc/aes-internal/"
			def snapshotsRepoUrl = "https://maven.cloudsmith.io/queues-enforth-development-inc/aes-internal/"
			url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
			credentials {
				username = '$repositoryUser'
				password = '$cloudsmithApiKey'
			}
		}
    }
    publications {
        repoPublication(MavenPublication) {
            from components.java

            artifactId archivesBaseName

            artifact sourcesJar
            artifact javadocJar
        }
        plugin(MavenPublication) {
            from components.java

            artifactId archivesBaseName

            artifact sourcesJar
            artifact javadocJar
        }
		qedCloudsmith(MavenPublication) {
			artifact sourcesJar
			artifact javadocJar
		}
    }
}

// add the source codes for Eclipse for gradleApi(). You need to use a gradle distribution with "-all" like https://services.gradle.org/distributions/gradle-4.3-all.zip
apply plugin: 'eclipse'
import org.gradle.plugins.ide.eclipse.model.*
eclipse {
    classpath {
        file {
            whenMerged {Classpath cp ->
                String gradleHome = gradle.getGradleHomeDir().absolutePath.replace(File.separator, '/')
                String gradleSrc = "${gradleHome}/src"
                cp.entries.each {ClasspathEntry entry ->
                    if ((entry in AbstractLibrary) && (entry.library.file.name.startsWith('gradle-'))) {
                        entry.sourcePath = new org.gradle.plugins.ide.eclipse.model.internal.FileReferenceFactory().fromPath(gradleSrc)
                    }
                }
            }
        }
    }
}

pluginBundle {
    website = 'https://github.com/i-net-software/JWebAssembly-Gradle'
    vcsUrl = 'https://github.com/i-net-software/JWebAssembly-Gradle'
    description = 'A Gradle plugin for the JWebAssembly compiler. A Java bytecode to WebAssembly converter. It produce the WASM and JavaScript file from your *.java, *.class and/or *.jar files.'
    tags = ['jwebassembly', 'webassembly', 'wasm', 'java', 'bytecode', 'compile', 'converter', 'transpiler' ]

    plugins {
        jwebassemblerPlugin {
            id = 'de.inetsoftware.jwebassembly'
            displayName = 'Gradle JWebAssembly plugin'
        }
    }
    mavenCoordinates {
        artifactId = archivesBaseName
    }
}

