plugins {
  id "com.gradle.plugin-publish" version "0.21.0"
  id 'java-library'
  id 'maven-publish'
}

// Allow people to developers who build their own to put in a private/company script to
// load the custom maven publishing repository
// Set localRepositoryScript in gradle.properties.
if (project.hasProperty('localRepositoryScript') && localRepositoryScript.length() > 0) {
    File repScript = new File("$localRepositoryScript")
    if (repScript.exists()) {
        apply from: "$localRepositoryScript"
    }
}

group 'de.inetsoftware'
archivesBaseName = 'jwebassembly-gradle'
String archivePreferredName = null;

//
// Allow a developer building their own version the ability to add their own appendix.
// Set theAppendix in gradle.properties in the root directory.
if (project.hasProperty('theAppendix') && theAppendix.length() > 0) {
    archivePreferredName = String.format("%s-%s", archivesBaseName, "$theAppendix")
} else {
    archivePreferredName = archivesBaseName
}
version = '0.4.1'
sourceCompatibility = "1.8"
targetCompatibility = "1.8"


jar {
    archiveAppendix.set("$theAppendix")
}

dependencies {
    api gradleApi()
}

sourceSets {
    main {
        java {
            srcDir 'src'
        }
    }
}

task sourcesJar(type: Jar) {
   archiveBaseName=archivesBaseName
   archiveAppendix.set("$theAppendix")
   classifier 'sources'
   from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
   archiveBaseName=archivesBaseName
   archiveAppendix.set("$theAppendix")
   classifier 'javadoc'
   from javadoc.destinationDir
}

tasks.withType(PublishToMavenRepository) {
    doFirst {
        println("Publishing ${publication.groupId}:${publication.artifactId}:${publication.version} to ${repository.url}")
    }
}

artifacts{
    archives sourcesJar
    archives javadocJar
} 

publishing {
    publications {
        release(MavenPublication) {
            from components.java
            
            artifactId archivePreferredName
            
            artifact(tasks.named("sourcesJar").get())
            artifact(tasks.named("javadocJar").get())
        }
        
    }
    
    repositories {
        // Publish to the local maven cache directory (%USERPROFILE%\.m2\repository)
        mavenLocal()
        
        // Store the entire generated libraries to a directory named by the project name
        // in the directory specified in the localRepositoryLocation property in the 
        // gradle properties file in the root directory.
        if (project.hasProperty('localRepositoryLocation') && localRepositoryLocation.length() > 0) {
            maven {
                name 'local'
                url String.format("%s/%s", localRepositoryLocation, archivePreferredName)
            }
        }
        
    }
    
}

// add the source codes for Eclipse for gradleApi(). You need to use a gradle distribution with "-all" like https://services.gradle.org/distributions/gradle-4.3-all.zip
apply plugin: 'eclipse'
import org.gradle.plugins.ide.eclipse.model.*
eclipse {
    classpath {
        file {
            whenMerged {Classpath cp ->
                String gradleHome = gradle.getGradleHomeDir().absolutePath.replace(File.separator, '/')
                String gradleSrc = "${gradleHome}/src"
                cp.entries.each {ClasspathEntry entry ->
                    if ((entry in AbstractLibrary) && (entry.library.file.name.startsWith('gradle-'))) {
                        entry.sourcePath = new org.gradle.plugins.ide.eclipse.model.internal.FileReferenceFactory().fromPath(gradleSrc)
                    }
                }
            }
        }
    }
}

pluginBundle {
    website = 'https://github.com/i-net-software/JWebAssembly-Gradle'
    vcsUrl = 'https://github.com/i-net-software/JWebAssembly-Gradle'
    description = 'A Gradle plugin for the JWebAssembly compiler. A Java bytecode to WebAssembly converter. It produce the WASM and JavaScript file from your *.java, *.class and/or *.jar files.'
    tags = ['jwebassembly', 'webassembly', 'wasm', 'java', 'bytecode', 'compile', 'converter', 'transpiler' ]

    plugins {
        jwebassemblerPlugin {
            id = 'de.inetsoftware.jwebassembly'
            displayName = 'Gradle JWebAssembly plugin'
            tags = ['jwebassembly', 'webassembly', 'wasm', 'java', 'bytecode', 'compile', 'converter', 'transpiler' ]
        }
    }
    mavenCoordinates {
        artifactId = archivePreferredName
    }
}
